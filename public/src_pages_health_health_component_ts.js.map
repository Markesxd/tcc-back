{"version":3,"file":"src_pages_health_health_component_ts.js","mappings":";;;;;;;;;;;;;;;AAC8D;;AAGxD,MAAOC,oBAAoB;EAC7BC,SAASA,CAACC,KAAsB;IAC5B,QAAOA,KAAK;MACR,KAAKH,wEAAe,CAACI,MAAM;QACvB,OAAO,SAAS;MACpB,KAAKJ,wEAAe,CAACK,KAAK;QACtB,OAAO,QAAQ;MACnB,KAAKL,wEAAe,CAACM,OAAO;QACxB,OAAO,QAAQ;MACnB,KAAKN,wEAAe,CAACO,SAAS;QAC1B,OAAO,OAAO;MAClB,KAAKP,wEAAe,CAACQ,MAAM;QACvB,OAAO,OAAO;;EAE1B;EAAC,QAAAC,CAAA;qBAdQR,oBAAoB;EAAA;EAAA,QAAAS,EAAA;;UAApBT,oBAAoB;IAAAU,IAAA;IAAAC,UAAA;EAAA;;;;;;;;;;;;;;;;ACS3B,MAAOC,WAAW;EAQpBC,cAAcA,CAACC,SAAoB;IAC/B,IAAI,CAACC,IAAI,GAAGD,SAAS,CAACE,GAAG,CAAC,MAAM,CAAC,EAAEd,KAAK;IACxC,IAAI,CAACe,IAAI,GAAGH,SAAS,CAACE,GAAG,CAAC,MAAM,CAAC,EAAEd,KAAK;IACxC,IAAI,CAACgB,KAAK,GAAGJ,SAAS,CAACE,GAAG,CAAC,MAAM,CAAC,EAAEd,KAAK;IACzC,IAAI,CAACiB,oBAAoB,GAAGC,MAAM,CAACN,SAAS,CAACE,GAAG,CAAC,gBAAgB,CAAC,EAAEd,KAAK,CAAC;EAC9E;;AAGG,IAAKH,eAMX;AAND,WAAYA,eAAe;EACvBA,eAAA,CAAAA,eAAA,gCAAS;EACTA,eAAA,CAAAA,eAAA,wBAAK;EACLA,eAAA,CAAAA,eAAA,0BAAM;EACNA,eAAA,CAAAA,eAAA,4BAAO;EACPA,eAAA,CAAAA,eAAA,0BAAM;AACV,CAAC,EANWA,eAAe,KAAfA,eAAe;;;;;;;;;;;;;;;;;;;;;;;;AC7BoB;AACiB;AACc;AAGH;AAIc;AACzC;AAC4D;;;;;;;;;;ICDxF4B,4DAAA,EAA+G;IAA/GA,4DAAA,cAA+G;IAA1GA,wDAAA,mBAAAI,0EAAA;MAAAJ,2DAAA,CAAAM,GAAA;MAAA,MAAAC,MAAA,GAAAP,2DAAA;MAAA,OAASA,yDAAA,CAAAO,MAAA,CAAAG,QAAA,EAAU;IAAA,EAAC;IAA+PV,uDAAA,eAA0Q;IAAAA,0DAAA,EAAM;;;;;IAUxiBA,4DAAA,iBAAmE;IAAAA,oDAAA,GAAgC;;IAAAA,0DAAA,EAAS;;;;IAAzDA,wDAAA,UAAAe,QAAA,CAAe;IAACf,uDAAA,GAAgC;IAAhCA,+DAAA,CAAAA,yDAAA,OAAAe,QAAA,EAAgC;;;;;;IAKvGf,4DAAA,cAAgE;IAC5BA,wDAAA,oBAAAmB,mEAAAC,MAAA;MAAApB,2DAAA,CAAAqB,GAAA;MAAA,MAAAC,MAAA,GAAAtB,2DAAA;MAAA,OAAUA,yDAAA,CAAAsB,MAAA,CAAAC,WAAA,CAAAH,MAAA,CAAmB;IAAA,EAAC;IAA9DpB,0DAAA,EAAiH;IACjHA,4DAAA,gBAAsC;IAAAA,oDAAA,GAAY;IAAAA,0DAAA,EAAQ;;;;IADqBA,uDAAA,GAAgB;IAAhBA,oEAAA,YAAAyB,MAAA,CAAAC,EAAA,KAAgB;IAAC1B,wDAAA,UAAAyB,MAAA,CAAAC,EAAA,CAAgB;IAC5F1B,uDAAA,GAAiB;IAAjBA,oEAAA,aAAAyB,MAAA,CAAAC,EAAA,KAAiB;IAAC1B,uDAAA,GAAY;IAAZA,+DAAA,CAAAyB,MAAA,CAAArC,IAAA,CAAY;;;ADNhE,MAAOuC,0BAA0B;EAgBrCC,YACYC,EAAe,EACjBC,UAAsB,EACtBC,YAAgC,EAChCC,WAA2B,EAC3BC,YAAsB;IAJpB,KAAAJ,EAAE,GAAFA,EAAE;IACJ,KAAAC,UAAU,GAAVA,UAAU;IACV,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,YAAY,GAAZA,YAAY;IApBtB,KAAAC,oBAAoB,GAAIC,MAAM,CAACC,MAAM,CAAChE,wEAAe,CAAuB,CAACiE,MAAM,CAACC,CAAC,IAAI,CAACC,KAAK,CAACD,CAAC,CAAC,CAAC;IACnG,KAAAE,KAAK,GAAG,IAAI;IAGZ,KAAAC,MAAM,GAAG,IAAI9C,uDAAY,EAAQ;IAEjC,KAAA+C,QAAQ,GAAG,IAAI,CAACb,EAAE,CAACc,KAAK,CAAC;MACvBC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC/C,sDAAU,CAACgD,QAAQ,CAAC,CAAC;MACjCC,IAAI,EAAE,CAAC,IAAIC,IAAI,CAAJ,CAAI,EAAE,CAAClD,sDAAU,CAACgD,QAAQ,CAAC,CAAC;MACvCG,cAAc,EAAE5E,wEAAe,CAACO,SAAS;MACzCsE,IAAI,EAAE,CAAC,EAAY;KACpB,CAAC;EAUC;EAEHC,QAAQA,CAAA;IACN,IAAI,CAACpB,UAAU,CAACzC,GAAG,EAAE,CAAC8D,SAAS,CAACF,IAAI,IAAG;MACrC,IAAI,CAACA,IAAI,GAAGA,IAAI,CAACG,IAAc;IACjC,CAAC,CAAC;EACJ;EAEA7B,WAAWA,CAAC8B,KAAY;IACtB,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAA0B;IAC9C,IAAGD,KAAK,KAAK,IAAI,EAAC;MAChB;;IAEF,MAAM5B,EAAE,GAAGjC,MAAM,CAAC6D,KAAK,CAAC/E,KAAK,CAAC;IAC9B,IAAG+E,KAAK,CAACE,OAAO,EAAE;MAChB,MAAMC,GAAG,GAAG,IAAI,CAACC,UAAU,CAAChC,EAAE,CAAC;MAC/B,IAAG,CAAC+B,GAAG,EAAE;QACP;;MAEF,IAAI,CAACE,OAAO,CAACF,GAAG,CAAC;KAClB,MAAM;MACL,IAAI,CAACG,SAAS,CAAClC,EAAE,CAAC;;EAEtB;EAEAmC,QAAQA,CAAA;IACN,MAAMC,WAAW,GAAG,IAAI7E,oEAAW,EAAE;IACrC6E,WAAW,CAAC5E,cAAc,CAAC,IAAI,CAACwD,QAAQ,CAAC;IACzC,IAAI,CAACV,WAAW,CAAC+B,KAAK,CAACD,WAAW,CAAC;EACrC;EAEApD,QAAQA,CAAA;IACN,MAAMsD,GAAG,GAAG,IAAI,CAAC/B,YAAY,CAACgC,IAAI,CAAClE,sHAA0B,EAAE;MAACmE,QAAQ,EAAE;IAAI,CAAC,CAAC;IAChFF,GAAG,CAACG,iBAAiB,CAACC,IAAI,GAAG,kDAAkD;IAC/EJ,GAAG,CAACK,MAAM,CAAClB,SAAS,CAAC,MAAK;MACxB,IAAI,CAACV,MAAM,CAAC6B,IAAI,EAAE;MAClB,IAAI,CAACtC,WAAW,CAACuC,OAAO,EAAE;IAC5B,CAAC,CAAC;EACJ;EAEAA,OAAOA,CAAA;IACL,IAAI,CAACvC,WAAW,CAACuC,OAAO,EAAE;EAC5B;EAEA,IAAIC,QAAQA,CAAA;IACV,MAAMvB,IAAI,GAAG,IAAI,CAACP,QAAQ,CAACrD,GAAG,CAAC,MAAM,CAAC,EAAEd,KAAK;IAC7C,IAAG,CAACkG,KAAK,CAACC,OAAO,CAACzB,IAAI,CAAC,EAAE;MACvB,MAAM,IAAI0B,KAAK,CAAC,uBAAuB,CAAC;;IAE1C,OAAO1B,IAAI;EACb;EAEAS,UAAUA,CAAChC,EAAU;IACnB,OAAO,IAAI,CAACuB,IAAI,EAAE2B,IAAI,CAACnB,GAAG,IAAIA,GAAG,CAAC/B,EAAE,KAAKA,EAAE,CAAC;EAC9C;EAEAiC,OAAOA,CAACF,GAAS;IACf,MAAMR,IAAI,GAAG,IAAI,CAACuB,QAAQ;IAC1BvB,IAAI,CAAC4B,IAAI,CAACpB,GAAG,CAAC;IACd,IAAI,CAACf,QAAQ,CAACoC,UAAU,CAAC;MAAC7B;IAAI,CAAC,CAAC;EAClC;EAEAW,SAASA,CAAClC,EAAU;IAClB,MAAMuB,IAAI,GAAG,IAAI,CAACuB,QAAQ;IAC1B,IAAI,CAAC9B,QAAQ,CAACoC,UAAU,CAAC;MACvB7B,IAAI,EAAEA,IAAI,CAACZ,MAAM,CAACoB,GAAG,IAAIA,GAAG,CAAC/B,EAAE,KAAKA,EAAE;KACvC,CAAC;EACJ;EAEAqD,iBAAiBA,CAAC9B,IAAY;IAC1B,KAAI,MAAMQ,GAAG,IAAIR,IAAI,EAAE;MACrB,IAAI,CAAC+B,gBAAgB,CAACvB,GAAG,CAAC;;EAEhC;EAEAwB,iBAAiBA,CAAA;IACf,MAAM3B,KAAK,GAAsB4B,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;IAChE,MAAMrC,IAAI,GAAG,IAAI,CAACJ,QAAQ,CAACrD,GAAG,CAAC,MAAM,CAAC,EAAEd,KAAK,IAAI,IAAIwE,IAAI,EAAE;IAC3DO,KAAK,CAAC/E,KAAK,GAAGuB,8DAAe,CAACgD,IAAI,CAAC;EACrC;EAEAkC,gBAAgBA,CAACvB,GAAS;IACxB,MAAMH,KAAK,GAAsB4B,QAAQ,CAACC,aAAa,CAAC,KAAK1B,GAAG,CAAC/B,EAAE,EAAE,CAAC;IACtE,IAAG,CAAC4B,KAAK,EAAC;MACR8B,UAAU,CAAC,MAAM,IAAI,CAACJ,gBAAgB,CAACvB,GAAG,CAAC,EAAE,GAAG,CAAC;KAClD,MAAM;MACLH,KAAK,CAACE,OAAO,GAAG,IAAI;;EAExB;EAAC,QAAA3E,CAAA;qBA9GU8C,0BAA0B,EAAA3B,+DAAA,CAAAsF,uDAAA,GAAAtF,+DAAA,CAAAwF,gEAAA,GAAAxF,+DAAA,CAAA0F,gFAAA,GAAA1F,+DAAA,CAAA4F,sEAAA,GAAA5F,+DAAA,CAAA4F,gEAAA;EAAA;EAAA,QAAA9G,EAAA;UAA1B6C,0BAA0B;IAAAoE,SAAA;IAAAC,OAAA;MAAAvD,MAAA;IAAA;IAAAzD,UAAA;IAAAiH,QAAA,GAAAjG,iEAAA;IAAAmG,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,oCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCrBnCxG,4DAAA,aAAiB;QAEcA,oDAAA,GAA6B;QAAAA,0DAAA,EAAK;QACzDA,4DAAA,EAAoG;QAApGA,4DAAA,aAAoG;QAA7EA,wDAAA,mBAAA0G,8DAAA;UAAA,OAASD,GAAA,CAAAlC,OAAA,EAAS;QAAA,EAAC;QAAiNvE,uDAAA,cAAmS;QAAAA,0DAAA,EAAM;QAExiBA,6DAAA,EAAqD;QAArDA,4DAAA,cAAqD;QAAxBA,wDAAA,sBAAA4G,6DAAA;UAAA,OAAYH,GAAA,CAAA5C,QAAA,EAAU;QAAA,EAAC;QAChD7D,4DAAA,UAAK;QACoCA,oDAAA,WAAI;QAAAA,0DAAA,EAAQ;QACjDA,4DAAA,cAA6C;QACzCA,uDAAA,gBAAyE;QACzEA,wDAAA,KAAA8G,+CAAA,iBAAwiB;QAC5iB9G,0DAAA,EAAM;QAEVA,4DAAA,WAAK;QACoCA,oDAAA,YAAI;QAAAA,0DAAA,EAAQ;QACjDA,uDAAA,iBAAyE;QAC7EA,0DAAA,EAAM;QACNA,4DAAA,WAAK;QACsCA,oDAAA,wCAAsB;QAAAA,0DAAA,EAAQ;QACrEA,4DAAA,kBAAyE;QACrEA,wDAAA,KAAA+G,6CAAA,qBAA4G;QAChH/G,0DAAA,EAAS;QAEbA,4DAAA,WAAK;QACyBA,oDAAA,aAAK;QAAAA,0DAAA,EAAQ;QACvCA,wDAAA,KAAAgH,0CAAA,kBAGM;QACVhH,0DAAA,EAAM;QACNA,4DAAA,kBAAuE;QAAAA,oDAAA,IAAkC;QAAAA,0DAAA,EAAS;;;QA5B3FA,uDAAA,GAA6B;QAA7BA,gEAAA,KAAAyG,GAAA,CAAAjE,KAAA,0BAA6B;QAGlDxC,uDAAA,GAAsB;QAAtBA,wDAAA,cAAAyG,GAAA,CAAA/D,QAAA,CAAsB;QAKW1C,uDAAA,GAAY;QAAZA,wDAAA,UAAAyG,GAAA,CAAAjE,KAAA,CAAY;QAUbxC,uDAAA,GAAuB;QAAvBA,wDAAA,YAAAyG,GAAA,CAAAvE,oBAAA,CAAuB;QAKblC,uDAAA,GAAS;QAATA,wDAAA,YAAAyG,GAAA,CAAAxD,IAAA,CAAS;QAKXjD,uDAAA,GAA4B;QAA5BA,wDAAA,cAAAyG,GAAA,CAAA/D,QAAA,CAAAwE,KAAA,CAA4B;QAAClH,uDAAA,GAAkC;QAAlCA,+DAAA,CAAAyG,GAAA,CAAAjE,KAAA,0BAAkC;;;mBDZzG9C,yDAAY,EAAAyH,oDAAA,EAAAA,iDAAA,EAAEvH,+DAAmB,EAAA0F,4DAAA,EAAAA,0DAAA,EAAAA,sEAAA,EAAAA,gEAAA,EAAAA,sEAAA,EAAAA,2DAAA,EAAAA,gEAAA,EAAAA,8DAAA,EAAAA,2DAAA,EAAEjH,qFAAoB;IAAA0J,MAAA;EAAA;;;;;;;;;;;;;;;;;;;;;;;AEjBpB;AAC6D;AAKrD;;;;;;;;;;ICO3C/H,4DAAA,SAAiC;IACzBA,oDAAA,GAAc;IAAAA,0DAAA,EAAK;IACvBA,4DAAA,SAAI;IAAAA,oDAAA,GAA2B;;IAAAA,0DAAA,EAAK;IACpCA,4DAAA,SAAI;IAEIA,4DAAA,EAAsG;IAAtGA,4DAAA,aAAsG;IAAjGA,wDAAA,mBAAAiI,yDAAA;MAAA,MAAAC,WAAA,GAAAlI,2DAAA,CAAAmI,GAAA;MAAA,MAAAC,QAAA,GAAAF,WAAA,CAAAG,SAAA;MAAA,MAAAC,MAAA,GAAAtI,2DAAA;MAAA,OAASA,yDAAA,CAAAsI,MAAA,CAAAC,SAAA,CAAAH,QAAA,CAAgB;IAAA,EAAC;IAAgPpI,uDAAA,cAAggB;IAAAA,0DAAA,EAAM;;;;IAJzxBA,uDAAA,GAAc;IAAdA,+DAAA,CAAAoI,QAAA,CAAAhJ,IAAA,CAAc;IACdY,uDAAA,GAA2B;IAA3BA,+DAAA,CAAAA,yDAAA,OAAAoI,QAAA,CAAA9I,IAAA,EAA2B;;;ADGzC,MAAOkJ,eAAe;EAI1B5G,YACU6G,kBAAsC,EACtCC,aAA4B,EAC5BC,MAAc,EACd1G,YAAsB;IAHtB,KAAAwG,kBAAkB,GAAlBA,kBAAkB;IAClB,KAAAC,aAAa,GAAbA,aAAa;IACb,KAAAC,MAAM,GAANA,MAAM;IACN,KAAA1G,YAAY,GAAZA,YAAY;IAPtB,KAAA2G,SAAS,GAAG,KAAK;EAQd;EAEH1F,QAAQA,CAAA;IACN,IAAI,CAAC2F,IAAI,EAAE;EACb;EAEAN,SAASA,CAAClF,KAAoB;IAC5B,MAAMW,GAAG,GAAG,IAAI,CAAC/B,YAAY,CAACgC,IAAI,CAACtC,qHAA0B,EAAE;MAACuC,QAAQ,EAAE;IAAI,CAAC,CAAC;IAChF,IAAGb,KAAK,EAAE;MACR,MAAM/D,IAAI,GAAG,IAAIyD,IAAI,CAACM,KAAK,CAAC/D,IAAI,IAAE,EAAE,CAAC;MACrC0E,GAAG,CAACG,iBAAiB,CAAC3B,KAAK,GAAG,KAAK;MACnCwB,GAAG,CAACG,iBAAiB,CAACzB,QAAQ,CAACoC,UAAU,CAAC;QACxClC,IAAI,EAAES,KAAK,CAACjE,IAAI;QAChB0D,IAAI,EAAExD,IAAI;QACV0D,cAAc,EAAEK,KAAK,CAAC7D;OACvB,CAAC;MACFwE,GAAG,CAACG,iBAAiB,CAACY,iBAAiB,CAAC1B,KAAK,CAAC9D,KAAK,CAAC;MACpD6F,UAAU,CAAC,MAAI;QACbpB,GAAG,CAACG,iBAAiB,CAACc,iBAAiB,EAAE;MAC3C,CAAC,EAAE,GAAG,CAAC;MACPjB,GAAG,CAACG,iBAAiB,CAAC1B,MAAM,CAACU,SAAS,CAAC,MAAM,IAAI,CAAC2F,WAAW,CAACzF,KAAK,CAAC,CAAC;;IAEvEW,GAAG,CAACK,MAAM,CAAClB,SAAS,CAAE4F,MAAoB,IAAI;MAC5C,IAAG1F,KAAK,KAAK2F,SAAS,EAAC;QACrBD,MAAM,CAACrH,EAAE,GAAG2B,KAAK,CAAC3B,EAAE;QACpB,IAAI,CAAC+G,kBAAkB,CAACQ,GAAG,CAACF,MAAM,CAAC,CAAC5F,SAAS,CAAC,MAAK;UACjD,IAAI,CAAC+F,MAAM,GAAG,IAAI,CAACA,MAAM,EAAE7G,MAAM,CAAC8G,GAAG,IAAIA,GAAG,CAACzH,EAAE,KAAK2B,KAAK,CAAC3B,EAAE,CAAC;UAC7D,IAAI,CAACwH,MAAM,EAAErE,IAAI,CAACkE,MAAM,CAAC;QAC3B,CAAC,CAAC;OACH,MAAM;QACL,IAAI,CAACN,kBAAkB,CAACW,IAAI,CAACL,MAAM,CAAC,CAAC5F,SAAS,CAAEkG,GAAG,IAAI;UACrD,IAAI,CAACH,MAAM,EAAErE,IAAI,CAACwE,GAAG,CAAC;QACxB,CAAC,CAAC;;IAEN,CAAC,CAAC;EACJ;EAEAP,WAAWA,CAACzF,KAAmB;IAC7B,IAAG,CAACA,KAAK,CAAC3B,EAAE,EAAE;MACZ,MAAM,IAAIiD,KAAK,CAAC,eAAe,CAAC;;IAElC,IAAI,CAAC8D,kBAAkB,CAAChG,MAAM,CAACY,KAAK,CAAC3B,EAAE,CAAC,CAACyB,SAAS,CAAC,MAAK;MACtD,IAAI,CAAE+F,MAAM,GAAG,IAAI,CAACA,MAAM,EAAE7G,MAAM,CAAC8G,GAAG,IAAIA,GAAG,KAAK9F,KAAK,CAAC;IAC1D,CAAC,CAAC;EACJ;EAEQwF,IAAIA,CAAA;IACV,IAAI,CAACJ,kBAAkB,CAACa,KAAK,EAAE,CAACnG,SAAS,CAACkG,GAAG,IAAG;MAC9C,IAAI,CAACH,MAAM,GAAGG,GAAqB;IACrC,CAAC,CAAC;EACJ;EAAC,QAAAxK,CAAA;qBA3DU2J,eAAe,EAAAxI,+DAAA,CAAAsF,gFAAA,GAAAtF,+DAAA,CAAAwF,6DAAA,GAAAxF,+DAAA,CAAA0F,mDAAA,GAAA1F,+DAAA,CAAA4F,gEAAA;EAAA;EAAA,QAAA9G,EAAA;UAAf0J,eAAe;IAAAzC,SAAA;IAAA/G,UAAA;IAAAiH,QAAA,GAAAjG,iEAAA;IAAAmG,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAmD,yBAAAjD,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCnB5BxG,4DAAA,aAAyB;QACEA,oDAAA,iBAAK;QAAAA,0DAAA,EAAK;QACjCA,4DAAA,EAAiG;QAAjGA,4DAAA,aAAiG;QAA5FA,wDAAA,mBAAA0J,mDAAA;UAAA,OAASjD,GAAA,CAAA8B,SAAA,EAAW;QAAA,EAAC;QAAgPvI,uDAAA,cAAiP;QAAAA,0DAAA,EAAM;QAErgBA,6DAAA,EAAgC;QAAhCA,4DAAA,iBAAgC;QAIZA,oDAAA,cAAM;QAAAA,0DAAA,EAAK;QACfA,4DAAA,UAAI;QAAAA,oDAAA,YAAI;QAAAA,0DAAA,EAAK;QACbA,uDAAA,UAAS;QACbA,0DAAA,EAAK;QAETA,4DAAA,aAAO;QACHA,wDAAA,KAAA2J,8BAAA,iBAQK;QACT3J,0DAAA,EAAQ;;;QATkBA,uDAAA,IAAS;QAATA,wDAAA,YAAAyG,GAAA,CAAAyC,MAAA,CAAS;;;mBDC/BxJ,yDAAY,EAAAyH,oDAAA,EAA8Ba,iEAAU;IAAAD,MAAA;EAAA;;;;;;;;;;;;;;;;;;;AEbzB;AACoB;;;AAMrD,MAAOpC,kBAAkB;EAE3B/D,YACYkI,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFR,KAAAC,OAAO,GAAGF,qEAAW,CAACG,MAAM,GAAG,SAAS;EAG7C;EAEHZ,IAAIA,CAACtF,WAAyB;IAC1B,OAAO,IAAI,CAACgG,IAAI,CAACV,IAAI,CAAC,IAAI,CAACW,OAAO,EAAEjG,WAAW,EAAE;MAC7CmG,OAAO,EAAE;KACZ,CAAC,CACDC,IAAI,CAACN,yCAAG,CAACP,GAAG,IAAIA,GAAG,CAACjG,IAAoB,CAAC,CAAC;EAC/C;EAEAkG,KAAKA,CAAA;IACD,OAAO,IAAI,CAACQ,IAAI,CAACzK,GAAG,CAAC,IAAI,CAAC0K,OAAO,CAAC;EACtC;EAEAd,GAAGA,CAACnF,WAAyB;IACzB,OAAO,IAAI,CAACgG,IAAI,CAACb,GAAG,CAAC,IAAI,CAACc,OAAO,EAAEjG,WAAW,EAAE;MAC5CmG,OAAO,EAAE;KACZ,CAAC;EACN;EAEAxH,MAAMA,CAACf,EAAU;IACb,OAAO,IAAI,CAACoI,IAAI,CAACrH,MAAM,CAAC,GAAG,IAAI,CAACsH,OAAO,IAAIrI,EAAE,EAAE,EAAE;MAC7CuI,OAAO,EAAE;KACZ,CAAC;EACN;EAAC,QAAApL,CAAA;qBA3BQ8G,kBAAkB,EAAA3F,sDAAA,CAAAsF,4DAAA;EAAA;EAAA,QAAAxG,EAAA;WAAlB6G,kBAAkB;IAAA0E,OAAA,EAAlB1E,kBAAkB,CAAA2E,IAAA;IAAAC,UAAA,EAFf;EAAM;;;;;;;;;;;;;;;ACPtB,SAASzK,eAAeA,CAACgD,IAAU;EAC/B,OAAO,GAAGA,IAAI,CAAC0H,WAAW,EAAE,IAAIC,mBAAmB,CAAC3H,IAAI,CAAC4H,QAAQ,EAAE,CAAC,IAAI5H,IAAI,CAAC6H,OAAO,EAAE,EAAE;AAC5F;AAEA,SAASF,mBAAmBA,CAACG,KAAa;EACtC,OAAOA,KAAK,GAAG,EAAE,GAAG,IAAIA,KAAK,EAAE,GAAG,GAAGA,KAAK,EAAE;AAChD","sources":["./src/Pipes/FormatRepeatInterval.pipe.ts","./src/model/healthEvent.model.ts","./src/pages/health/components/create-health-event/create-health-event.component.ts","./src/pages/health/components/create-health-event/create-health-event.component.html","./src/pages/health/health.component.ts","./src/pages/health/health.component.html","./src/services/healthEvent.service.ts","./src/util/date.ts"],"sourcesContent":["import { Pipe, PipeTransform } from \"@angular/core\";\nimport { ReapeatInterval } from \"src/model/healthEvent.model\";\n\n@Pipe({name: 'FormatRepeatInterval', standalone: true})\nexport class FormatRepeatInterval implements PipeTransform {\n    transform(value: ReapeatInterval): string {\n        switch(value){\n            case ReapeatInterval.WEEKLY:\n                return 'Semanal';\n            case ReapeatInterval.DAILY:\n                return 'Diario';\n            case ReapeatInterval.MONTHLY:\n                return 'Mensal';\n            case ReapeatInterval.NO_REPEAT:\n                return 'Único';\n            case ReapeatInterval.YEARLY:\n                return 'Anual';\n        }\n    }\n}","import { FormGroup } from \"@angular/forms\";\nimport { ICat } from \"./Cat.model\";\nimport { IUser } from \"./User.model\";\n\nexport interface IHealthEvent {\n    id?: number;\n    nome?: string;\n    data?: Date;\n    intervaloDeRepeticao?: ReapeatInterval\n    usuario?: IUser;\n    gatos?: ICat[];\n}\n\nexport class HealthEvent implements IHealthEvent {\n    id?: number;\n    nome?: string;\n    data?: Date;\n    intervaloDeRepeticao?: ReapeatInterval;\n    usuario?: IUser;\n    gatos?: ICat[];\n\n    createFromForm(formGroup: FormGroup): void {\n        this.nome = formGroup.get('name')?.value;\n        this.data = formGroup.get('date')?.value;\n        this.gatos = formGroup.get('cats')?.value;\n        this.intervaloDeRepeticao = Number(formGroup.get('repeatInterval')?.value);\n    }\n}\n\nexport enum ReapeatInterval {\n    NO_REPEAT,\n    DAILY,\n    WEEKLY,\n    MONTHLY,\n    YEARLY\n}","import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { NgbActiveModal, NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { CookieService } from 'ngx-cookie-service';\nimport { FormatRepeatInterval } from 'src/Pipes/FormatRepeatInterval.pipe';\nimport { CatService } from 'src/services/cat.service';\nimport { ICat } from 'src/model/Cat.model';\nimport { User } from 'src/model/User.model';\nimport { HealthEvent, IHealthEvent, ReapeatInterval } from 'src/model/healthEvent.model';\nimport { convertFromDate } from 'src/util/date';\nimport { ConfirmationModalComponent } from 'src/components/confirmation-modal/confirmation-modal.component';\nimport { HealthEventService } from 'src/services/healthEvent.service';\n\n@Component({\n  selector: 'create-health-event',\n  templateUrl: './create-health-event.component.html',\n  styleUrls: ['./create-health-event.component.css'],\n  imports: [CommonModule, ReactiveFormsModule, FormatRepeatInterval],\n  standalone: true\n})\nexport class CreateHealthEventComponent {\n  repeatIntervalValues = (Object.values(ReapeatInterval) as ReapeatInterval[]).filter(o => !isNaN(o));\n  isNew = true;\n\n  @Output()\n  delete = new EventEmitter<void>();\n\n  editForm = this.fb.group({\n    name: ['', [Validators.required]],\n    date: [new Date, [Validators.required]],\n    repeatInterval: ReapeatInterval.NO_REPEAT,\n    cats: [[] as ICat[]]\n  });\n\n  cats?: ICat[];\n\n  constructor(\n    protected fb: FormBuilder,\n    private catService: CatService,\n    private eventService: HealthEventService,\n    private activeModal: NgbActiveModal,\n    private modalService: NgbModal\n  ) {}\n\n  ngOnInit():void {\n    this.catService.get().subscribe(cats => {\n      this.cats = cats.body as ICat[];\n    })\n  }\n\n  onChangeCat(event: Event): void {\n    const input = event.target as HTMLInputElement;\n    if(input === null){\n      return;\n    }\n    const id = Number(input.value);\n    if(input.checked) {\n      const cat = this.getCatById(id);\n      if(!cat) {\n        return;\n      }\n      this.pushCat(cat);\n    } else {\n      this.removeCat(id);\n    }\n  }\n\n  onSubmit(): void {\n    const healthEvent = new HealthEvent();\n    healthEvent.createFromForm(this.editForm);\n    this.activeModal.close(healthEvent);\n  }\n\n  onDelete(): void {\n    const ref = this.modalService.open(ConfirmationModalComponent, {centered: true});\n    ref.componentInstance.text = \"Você tem certeza que deseja excluir este evento?\";\n    ref.closed.subscribe(() => {\n      this.delete.emit();\n      this.activeModal.dismiss();\n    })\n  }\n\n  dismiss(): void {\n    this.activeModal.dismiss();\n  }\n\n  get formCats(): ICat[] {\n    const cats = this.editForm.get('cats')?.value;\n    if(!Array.isArray(cats)) {\n      throw new Error(\"Cats is not an array!\");\n    }\n    return cats;\n  }\n\n  getCatById(id: number): ICat | undefined {\n    return this.cats?.find(cat => cat.id === id);\n  }\n\n  pushCat(cat: ICat): void {\n    const cats = this.formCats;\n    cats.push(cat);\n    this.editForm.patchValue({cats});\n  }\n\n  removeCat(id: number): void {\n    const cats = this.formCats;\n    this.editForm.patchValue({\n      cats: cats.filter(cat => cat.id !== id)\n    });\n  }\n\n  firstTimeLoadCats(cats: ICat[]): void {\n      for(const cat of cats) {\n        this.firstTimeLoadCat(cat);\n      }\n  }\n\n  firstTimeLoadDate(): void {\n    const input = <HTMLInputElement> document.querySelector('#date');\n    const date = this.editForm.get('date')?.value ?? new Date();\n    input.value = convertFromDate(date);\n  }\n\n  firstTimeLoadCat(cat: ICat): void {\n    const input = <HTMLInputElement> document.querySelector(`#i${cat.id}`);\n    if(!input){\n      setTimeout(() => this.firstTimeLoadCat(cat), 100);\n    } else {\n      input.checked = true;\n    }\n  }\n}\n","    <div class=\"p-3\">\n        <div class=\"form-header\">\n            <h3 class=\"form-title\">{{isNew? 'Novo' : ''}} Evento</h3>\n            <svg class=\"form-icon\" (click)=\"dismiss()\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d=\"M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z\"/></svg>\n        </div>\n        <form [formGroup]=\"editForm\" (ngSubmit)=\"onSubmit()\">\n            <div>\n                <label class=\"form-label\" for=\"name\">Nome</label>\n                <div class=\"d-flex align-items-center gap-2\">\n                    <input class=\"form-control\" type=\"text\" id=\"name\" formControlName=\"name\">\n                    <svg (click)=\"onDelete()\" *ngIf=\"!isNew\" xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 448 512\"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --><path d=\"M135.2 17.7L128 32H32C14.3 32 0 46.3 0 64S14.3 96 32 96H416c17.7 0 32-14.3 32-32s-14.3-32-32-32H320l-7.2-14.3C307.4 6.8 296.3 0 284.2 0H163.8c-12.1 0-23.2 6.8-28.6 17.7zM416 128H32L53.2 467c1.6 25.3 22.6 45 47.9 45H346.9c25.3 0 46.3-19.7 47.9-45L416 128z\"/></svg>\n                </div>\n            </div>\n            <div>\n                <label class=\"form-label\" for=\"date\">Data</label>\n                <input class=\"form-control\" type=\"date\" id=\"date\" formControlName=\"date\">\n            </div>\n            <div>\n                <label class=\"form-label\" for=\"repeat\">Intervalo de Repetição</label>\n                <select class=\"form-select\" formControlName=\"repeatInterval\" id=\"repeat\">\n                    <option *ngFor=\"let value of repeatIntervalValues\" [value]=\"value\">{{value | FormatRepeatInterval}}</option>\n                </select>\n            </div>\n            <div>\n                <label class=\"form-label\">gatos</label>\n                <div class=\"form-check\" *ngFor=\"let cat of cats; let i = index\">\n                    <input class=\"form-check-input\" (change)=\"onChangeCat($event)\" type=\"checkbox\" id=\"i{{cat.id}}\" [value]=\"cat.id\">\n                    <label class=\"mt-1\" for=\"i{{cat.id}}\">{{cat.nome}}</label>\n                </div>\n            </div>\n            <button class=\"form-buttom\" type=\"submit\" [disabled]=\"!editForm.valid\">{{isNew ? 'Cadastrar' : 'Salvar'}}</button>\n        </form>\n    </div>","import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CreateHealthEventComponent } from './components/create-health-event/create-health-event.component';\nimport { IHealthEvent } from 'src/model/healthEvent.model';\nimport { HealthEventService } from 'src/services/healthEvent.service';\nimport { UserService } from 'src/services/user.service';\nimport { CookieService } from 'ngx-cookie-service';\nimport { FormatDate } from 'src/Pipes/FormatDate.pipe';\nimport { Router } from '@angular/router';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { convertFromDate } from 'src/util/date';\n\n@Component({\n  selector: 'app-health',\n  standalone: true,\n  imports: [CommonModule, CreateHealthEventComponent, FormatDate],\n  templateUrl: './health.component.html',\n  styleUrls: ['./health.component.css']\n})\nexport class HealthComponent {\n  showModal = false;\n  events?: IHealthEvent[];\n\n  constructor(\n    private healthEventService: HealthEventService,\n    private cookieService: CookieService,\n    private router: Router,\n    private modalService: NgbModal\n  ) {}\n\n  ngOnInit(): void {\n    this.load();\n  }\n\n  openModal(event?: IHealthEvent): void {\n    const ref = this.modalService.open(CreateHealthEventComponent, {centered: true});\n    if(event) {\n      const data = new Date(event.data??'');\n      ref.componentInstance.isNew = false;\n      ref.componentInstance.editForm.patchValue({\n        name: event.nome,\n        date: data,\n        repeatInterval: event.intervaloDeRepeticao\n      });\n      ref.componentInstance.firstTimeLoadCats(event.gatos);\n      setTimeout(()=> {\n        ref.componentInstance.firstTimeLoadDate();\n      }, 200);\n      ref.componentInstance.delete.subscribe(() => this.deleteEvent(event));\n    }\n    ref.closed.subscribe((_event: IHealthEvent) => {\n      if(event !== undefined){\n        _event.id = event.id;\n        this.healthEventService.put(_event).subscribe(() => {\n          this.events = this.events?.filter(evt => evt.id !== event.id);\n          this.events?.push(_event);\n        });\n      } else {\n        this.healthEventService.post(_event).subscribe((res) => {\n          this.events?.push(res);\n        });\n      }\n    });\n  }\n\n  deleteEvent(event: IHealthEvent) {\n    if(!event.id) {\n      throw new Error('Evento sem id');\n    }\n    this.healthEventService.delete(event.id).subscribe(() => {\n      this. events = this.events?.filter(evt => evt !== event);\n    });\n  }\n\n  private load(): void {\n    this.healthEventService.fetch().subscribe(res => {\n      this.events = res as IHealthEvent[];\n    })\n  }\n}\n","<div class=\"page-header\">\n    <h2 class=\"page-title\">Saúde</h2>\n    <svg (click)=\"openModal()\" xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 512 512\"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM232 344V280H168c-13.3 0-24-10.7-24-24s10.7-24 24-24h64V168c0-13.3 10.7-24 24-24s24 10.7 24 24v64h64c13.3 0 24 10.7 24 24s-10.7 24-24 24H280v64c0 13.3-10.7 24-24 24s-24-10.7-24-24z\"/></svg>\n</div>\n<section class=\"health-content\">\n    <table class=\"table table-striped\">\n        <thead>\n            <tr>\n                <th>Evento</th>\n                <th>data</th>\n                <th></th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let event of events\">\n                <td>{{event.nome}}</td>\n                <td>{{event.data | formatDate}}</td>\n                <td>\n                    <span class=\"d-flex justify-content-between\">\n                        <svg (click)=\"openModal(event)\" xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 512 512\"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --><path d=\"M471.6 21.7c-21.9-21.9-57.3-21.9-79.2 0L362.3 51.7l97.9 97.9 30.1-30.1c21.9-21.9 21.9-57.3 0-79.2L471.6 21.7zm-299.2 220c-6.1 6.1-10.8 13.6-13.5 21.9l-29.6 88.8c-2.9 8.6-.6 18.1 5.8 24.6s15.9 8.7 24.6 5.8l88.8-29.6c8.2-2.7 15.7-7.4 21.9-13.5L437.7 172.3 339.7 74.3 172.4 241.7zM96 64C43 64 0 107 0 160V416c0 53 43 96 96 96H352c53 0 96-43 96-96V320c0-17.7-14.3-32-32-32s-32 14.3-32 32v96c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V160c0-17.7 14.3-32 32-32h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H96z\"/></svg>\n                    </span>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</section>","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable, map } from \"rxjs\";\nimport { environment } from \"src/environments/environment\";\nimport { IHealthEvent } from \"src/model/healthEvent.model\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class HealthEventService {\n    private baseUrl = environment.apiUrl + '/evento';\n    constructor(\n        private http: HttpClient\n    ) {}\n\n    post(healthEvent: IHealthEvent): Observable<IHealthEvent> {\n        return this.http.post(this.baseUrl, healthEvent, {\n            observe: 'response'\n        })\n        .pipe(map(res => res.body as IHealthEvent));\n    }\n\n    fetch(): Observable<Object> {\n        return this.http.get(this.baseUrl);\n    }\n\n    put(healthEvent: IHealthEvent): Observable<Object> {\n        return this.http.put(this.baseUrl, healthEvent, {\n            observe: 'response'\n        });\n    }\n\n    delete(id: number): Observable<Object> {\n        return this.http.delete(`${this.baseUrl}/${id}`, {\n            observe: 'response'\n        });\n    }\n}","function convertFromDate(date: Date): string {\n    return `${date.getFullYear()}-${getMonthLeadingZero(date.getMonth())}-${date.getDate()}`;\n}\n\nfunction getMonthLeadingZero(month: number): string {\n    return month < 10 ? `0${month}` : `${month}`;\n}\nexport {convertFromDate}"],"names":["ReapeatInterval","FormatRepeatInterval","transform","value","WEEKLY","DAILY","MONTHLY","NO_REPEAT","YEARLY","_","_2","pure","standalone","HealthEvent","createFromForm","formGroup","nome","get","data","gatos","intervaloDeRepeticao","Number","CommonModule","EventEmitter","ReactiveFormsModule","Validators","convertFromDate","ConfirmationModalComponent","i0","ɵɵnamespaceSVG","ɵɵelementStart","ɵɵlistener","CreateHealthEventComponent__svg_svg_12_Template__svg_svg_click_0_listener","ɵɵrestoreView","_r4","ctx_r3","ɵɵnextContext","ɵɵresetView","onDelete","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵproperty","value_r5","ɵɵadvance","ɵɵtextInterpolate","ɵɵpipeBind1","CreateHealthEventComponent_div_25_Template_input_change_1_listener","$event","_r9","ctx_r8","onChangeCat","ɵɵpropertyInterpolate1","cat_r6","id","CreateHealthEventComponent","constructor","fb","catService","eventService","activeModal","modalService","repeatIntervalValues","Object","values","filter","o","isNaN","isNew","delete","editForm","group","name","required","date","Date","repeatInterval","cats","ngOnInit","subscribe","body","event","input","target","checked","cat","getCatById","pushCat","removeCat","onSubmit","healthEvent","close","ref","open","centered","componentInstance","text","closed","emit","dismiss","formCats","Array","isArray","Error","find","push","patchValue","firstTimeLoadCats","firstTimeLoadCat","firstTimeLoadDate","document","querySelector","setTimeout","ɵɵdirectiveInject","i1","FormBuilder","i2","CatService","i3","HealthEventService","i4","NgbActiveModal","NgbModal","selectors","outputs","features","ɵɵStandaloneFeature","decls","vars","consts","template","CreateHealthEventComponent_Template","rf","ctx","CreateHealthEventComponent_Template__svg_svg_click_4_listener","ɵɵnamespaceHTML","CreateHealthEventComponent_Template_form_ngSubmit_6_listener","ɵɵtemplate","CreateHealthEventComponent__svg_svg_12_Template","CreateHealthEventComponent_option_21_Template","CreateHealthEventComponent_div_25_Template","ɵɵtextInterpolate1","valid","i5","NgForOf","NgIf","ɵNgNoValidate","NgSelectOption","ɵNgSelectMultipleOption","DefaultValueAccessor","SelectControlValueAccessor","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","styles","FormatDate","HealthComponent_tr_15_Template__svg_svg_click_8_listener","restoredCtx","_r3","event_r1","$implicit","ctx_r2","openModal","HealthComponent","healthEventService","cookieService","router","showModal","load","deleteEvent","_event","undefined","put","events","evt","post","res","fetch","CookieService","Router","HealthComponent_Template","HealthComponent_Template__svg_svg_click_3_listener","HealthComponent_tr_15_Template","map","environment","http","baseUrl","apiUrl","observe","pipe","ɵɵinject","HttpClient","factory","ɵfac","providedIn","getFullYear","getMonthLeadingZero","getMonth","getDate","month"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}